#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "üîç Executando verifica√ß√µes pr√©-commit..."

# Verificar se existem arquivos Python
if git diff --cached --name-only | grep -E "\.(py)$" > /dev/null; then
    echo "üìù Arquivos Python detectados"
    
    # Verificar formata√ß√£o com black (se dispon√≠vel)
    if command -v black >/dev/null 2>&1; then
        echo "üé® Verificando formata√ß√£o do c√≥digo com black..."
        black --check --diff .
        if [ $? -ne 0 ]; then
            echo "‚ùå Formata√ß√£o incorreta detectada. Execute: black ."
            exit 1
        fi
    fi
    
    # Verificar imports com isort (se dispon√≠vel)
    if command -v isort >/dev/null 2>&1; then
        echo "üì¶ Verificando ordem dos imports com isort..."
        isort --check-only --diff .
        if [ $? -ne 0 ]; then
            echo "‚ùå Imports fora de ordem. Execute: isort ."
            exit 1
        fi
    fi
    
    # Verificar lint com flake8 (se dispon√≠vel)
    if command -v flake8 >/dev/null 2>&1; then
        echo "üîç Verificando c√≥digo com flake8..."
        flake8 . --max-line-length=120 --extend-ignore=E203,W503
        if [ $? -ne 0 ]; then
            echo "‚ùå Problemas de lint detectados"
            exit 1
        fi
    fi
    
    # Verificar tipos com mypy (se dispon√≠vel)
    if command -v mypy >/dev/null 2>&1; then
        echo "üî¨ Verificando tipos com mypy..."
        mypy app.py --ignore-missing-imports
        if [ $? -ne 0 ]; then
            echo "‚ö†Ô∏è Avisos de tipos detectados"
            # N√£o falhamos aqui, apenas alertamos
        fi
    fi
fi

# Verificar se existem arquivos SQL
if git diff --cached --name-only | grep -E "\.(sql)$" > /dev/null; then
    echo "üóÑÔ∏è Arquivos SQL detectados"
    
    # Verificar sintaxe b√°sica SQL
    for arquivo in $(git diff --cached --name-only | grep -E "\.(sql)$"); do
        echo "üîç Verificando sintaxe SQL: $arquivo"
        
        # Verifica√ß√µes b√°sicas de sintaxe SQL
        if grep -i "drop table\|truncate\|delete from.*where.*1=1" "$arquivo" > /dev/null; then
            echo "‚ö†Ô∏è Comandos perigosos detectados em $arquivo"
            echo "   Por favor, revise cuidadosamente antes do commit"
        fi
        
        # Verificar se tem ponto e v√≠rgula no final
        if ! tail -1 "$arquivo" | grep -q ";"; then
            echo "‚ö†Ô∏è Arquivo SQL $arquivo pode estar sem ponto e v√≠rgula no final"
        fi
    done
fi

# Verificar arquivos de configura√ß√£o
if git diff --cached --name-only | grep -E "\.(toml|yaml|yml|json)$" > /dev/null; then
    echo "‚öôÔ∏è Arquivos de configura√ß√£o detectados"
    
    # Verificar sintaxe JSON
    for arquivo in $(git diff --cached --name-only | grep -E "\.(json)$"); do
        echo "üîç Verificando sintaxe JSON: $arquivo"
        if command -v python >/dev/null 2>&1; then
            python -m json.tool "$arquivo" > /dev/null
            if [ $? -ne 0 ]; then
                echo "‚ùå JSON inv√°lido em $arquivo"
                exit 1
            fi
        fi
    done
fi

# Verificar tamanho dos arquivos
echo "üìè Verificando tamanho dos arquivos..."
for arquivo in $(git diff --cached --name-only); do
    if [ -f "$arquivo" ]; then
        tamanho=$(wc -c < "$arquivo")
        if [ $tamanho -gt 1048576 ]; then  # 1MB
            echo "‚ö†Ô∏è Arquivo grande detectado: $arquivo ($(echo $tamanho | awk '{print int($1/1024/1024)"MB"}')"
            echo "   Considere usar Git LFS para arquivos grandes"
        fi
    fi
done

# Verificar se n√£o h√° credenciais expostas
echo "üîê Verificando por credenciais expostas..."
if git diff --cached | grep -i -E "(password|senha|api_key|secret|token|credential)" | grep -v "placeholder\|example\|dummy\|REMOVIDO"; then
    echo "‚ö†Ô∏è Poss√≠veis credenciais detectadas no commit"
    echo "   Verifique se n√£o h√° informa√ß√µes sens√≠veis sendo commitadas"
fi

echo "‚úÖ Verifica√ß√µes pr√©-commit conclu√≠das com sucesso!"
