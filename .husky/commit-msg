#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "üìù Verificando mensagem do commit..."

# Ler a mensagem do commit
mensagem_commit=$(cat "$1")

# Remover linhas de coment√°rio (que come√ßam com #)
mensagem_limpa=$(echo "$mensagem_commit" | grep -v "^#" | sed '/^\s*$/d')

# Verificar se a mensagem n√£o est√° vazia
if [ -z "$mensagem_limpa" ]; then
    echo "‚ùå Mensagem do commit est√° vazia"
    echo "   Forne√ßa uma mensagem descritiva para o commit"
    exit 1
fi

# Verificar tamanho m√≠nimo da mensagem
tamanho_minimo=10
if [ ${#mensagem_limpa} -lt $tamanho_minimo ]; then
    echo "‚ùå Mensagem do commit muito curta (m√≠nimo: $tamanho_minimo caracteres)"
    echo "   Mensagem atual: '$mensagem_limpa'"
    echo "   Forne√ßa uma descri√ß√£o mais detalhada das mudan√ßas"
    exit 1
fi

# Verificar primeira linha (t√≠tulo do commit)
primeira_linha=$(echo "$mensagem_limpa" | head -n1)

# Verificar tamanho da primeira linha (t√≠tulo)
tamanho_titulo=${#primeira_linha}
if [ $tamanho_titulo -gt 72 ]; then
    echo "‚ö†Ô∏è T√≠tulo do commit muito longo ($tamanho_titulo chars, m√°x: 72)"
    echo "   T√≠tulo: '$primeira_linha'"
    echo "   Considere encurtar o t√≠tulo e usar o corpo para detalhes"
fi

# Verificar se o t√≠tulo n√£o termina com ponto
if echo "$primeira_linha" | grep -q "\.$"; then
    echo "‚ö†Ô∏è T√≠tulo do commit n√£o deve terminar com ponto"
    echo "   T√≠tulo: '$primeira_linha'"
fi

# Verificar padr√µes recomendados (conventional commits)
if echo "$primeira_linha" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?:"; then
    echo "‚úÖ Formato Conventional Commits detectado"
else
    echo "üí° Dica: Considere usar Conventional Commits"
    echo "   Exemplos: feat: adicionar funcionalidade X"
    echo "            fix: corrigir bug na conex√£o"
    echo "            docs: atualizar README"
fi

# Verificar padr√µes a evitar
if echo "$mensagem_limpa" | grep -qiE "^(wip|test|temp|debug|fix|update|change)$"; then
    echo "‚ö†Ô∏è Mensagem muito gen√©rica detectada"
    echo "   Mensagem: '$mensagem_limpa'"
    echo "   Seja mais espec√≠fico sobre o que foi alterado"
    echo "   Exemplos bons:"
    echo "   - feat(auth): implementar autentica√ß√£o com Supabase"
    echo "   - fix(db): corrigir timeout na conex√£o"
    echo "   - docs: adicionar documenta√ß√£o da API"
fi

# Verificar palavras proibidas ou problem√°ticas
if echo "$mensagem_limpa" | grep -qiE "(fuck|shit|damn|crap|stupid|bad|hack)"; then
    echo "‚ùå Linguagem inadequada detectada na mensagem"
    echo "   Use linguagem profissional nos commits"
    exit 1
fi

# Verificar se h√° refer√™ncia a issues/tickets
if echo "$mensagem_limpa" | grep -qE "(#[0-9]+|issue|ticket|bug|close|fix|resolve)"; then
    echo "‚úÖ Refer√™ncia a issue/ticket detectada"
fi

# Verificar m√∫ltiplas linhas (boa pr√°tica)
linhas_count=$(echo "$mensagem_limpa" | wc -l)
if [ $linhas_count -gt 1 ]; then
    echo "‚úÖ Commit com corpo/descri√ß√£o detalhada"
    
    # Verificar linha em branco ap√≥s t√≠tulo
    segunda_linha=$(echo "$mensagem_limpa" | sed -n '2p')
    if [ ! -z "$segunda_linha" ]; then
        echo "‚ö†Ô∏è Deve haver uma linha em branco ap√≥s o t√≠tulo"
        echo "   Formato recomendado:"
        echo "   t√≠tulo do commit"
        echo "   "
        echo "   descri√ß√£o detalhada..."
    fi
fi

# Verificar por marcadores comuns de trabalho em progresso
if echo "$mensagem_limpa" | grep -qiE "(wip|todo|fixme|xxx|hack|temporary)"; then
    echo "‚ö†Ô∏è Marcadores de trabalho em progresso detectados"
    echo "   Considere finalizar o trabalho antes do commit"
    read -p "Continuar mesmo assim? (s/N): " confirmacao
    if [ "$confirmacao" != "s" ] && [ "$confirmacao" != "S" ]; then
        echo "‚ùå Commit cancelado pelo usu√°rio"
        exit 1
    fi
fi

# Estat√≠sticas da mensagem
echo "üìä Estat√≠sticas da mensagem:"
echo "   üìè Tamanho total: ${#mensagem_limpa} caracteres"
echo "   üìÑ Linhas: $linhas_count"
echo "   üìù T√≠tulo: '$primeira_linha' (${#primeira_linha} chars)"

# Verifica√ß√£o de categoria autom√°tica
categoria="geral"
if echo "$mensagem_limpa" | grep -qiE "(feat|feature|add|novo|implementar)"; then
    categoria="funcionalidade"
elif echo "$mensagem_limpa" | grep -qiE "(fix|bug|corrig|erro|problema)"; then
    categoria="corre√ß√£o"
elif echo "$mensagem_limpa" | grep -qiE "(docs|documenta√ß√£o|readme)"; then
    categoria="documenta√ß√£o"
elif echo "$mensagem_limpa" | grep -qiE "(style|format|lint|clean)"; then
    categoria="estilo"
elif echo "$mensagem_limpa" | grep -qiE "(refactor|reorganiz|reestrutur)"; then
    categoria="refatora√ß√£o"
elif echo "$mensagem_limpa" | grep -qiE "(test|teste)"; then
    categoria="teste"
elif echo "$mensagem_limpa" | grep -qiE "(perf|performance|otimiz)"; then
    categoria="performance"
fi

echo "   üìÇ Categoria detectada: $categoria"

echo "‚úÖ Mensagem do commit aprovada!"
